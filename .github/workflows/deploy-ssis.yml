name: Deploy SSIS Packages to SQL Server

on:
  workflow_dispatch:

jobs:
  deploy-ssis:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean .dtproj references to missing .dtsx files
        shell: powershell
        run: |
          $projectFile = "${{ github.workspace }}\HandsOnProject\Timesheets\Integration Services Project1.dtproj"
          if (-not (Test-Path $projectFile)) {
            Write-Error "Project file not found: $projectFile"
            exit 1
          }

          [xml]$xml = Get-Content $projectFile
          $pkgNodes = $xml.Project.Packages.PackageFile
          $toRemove = @()

          foreach ($pkg in $pkgNodes) {
            $pkgPath = Join-Path (Split-Path $projectFile) $pkg.InnerText
            if (-not (Test-Path $pkgPath)) {
              Write-Output "Removing missing reference: $($pkg.InnerText)"
              $toRemove += $pkg
            }
          }

          foreach ($pkg in $toRemove) {
            $null = $xml.Project.Packages.RemoveChild($pkg)
          }

          $xml.Save($projectFile)
          Write-Output "✅ Cleaned missing .dtsx references."

      - name: Build SSIS Project
        shell: powershell
        run: |
          $projectFile = "${{ github.workspace }}\HandsOnProject\Timesheets\Integration Services Project1.dtproj"
          $outputDir = "${{ runner.temp }}\SSISOutput"
          $config = "Development"
          if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
          }
          & "C:\SSISDevOpsTools\SSISBuild.exe" -p:"$projectFile" -o:"$outputDir" -c:"$config" -l:DIAG
          $ispacPath = Join-Path $outputDir "$config\Integration Services Project1.ispac"
          if (-not (Test-Path $ispacPath)) {
            Write-Error "Build failed: .ispac file not found at $ispacPath"
            exit 1
          }
          Write-Output "✅ Build succeeded: $ispacPath"

      - name: Create SSIS Catalog Folder if missing
        shell: powershell
        run: |
          $sqlServer = "SAMBE202519"
          $catalogDB = "SSISDB"
          $folderName = "TimesheetMigration"
          $folderExists = sqlcmd -S $sqlServer -d $catalogDB -Q "SELECT 1 FROM catalog.folders WHERE name = '$folderName'" -E -h -1
          if ([string]::IsNullOrEmpty($folderExists)) {
            Write-Output "Creating folder '$folderName'..."
            sqlcmd -S $sqlServer -d $catalogDB -Q "EXEC catalog.create_folder @folder_name = '$folderName'" -E
          } else {
            Write-Output "Folder '$folderName' already exists."

      - name: Deploy SSIS Project to SQL Server
        shell: powershell
        run: |
          $ispacPath = "${{ runner.temp }}\SSISOutput\Development\Integration Services Project1.ispac"
          $sqlServer = "SAMBE202519"
          $catalogDB = "SSISDB"
          $folderName = "TimesheetMigration"
          $projectName = "Integration Services Project1"

          Add-Type -AssemblyName System.Data
          $projectBytes = [System.IO.File]::ReadAllBytes($ispacPath)
          $connString = "Data Source=$sqlServer;Initial Catalog=$catalogDB;Integrated Security=SSPI;"
          $conn = New-Object System.Data.SqlClient.SqlConnection $connString
          $conn.Open()

          $cmd = $conn.CreateCommand()
          $cmd.CommandText = "[catalog].[deploy_project]"
          $cmd.CommandType = [System.Data.CommandType]::StoredProcedure
          $cmd.Parameters.Add("@folder_name", [System.Data.SqlDbType]::NVarChar, 128).Value = $folderName
          $cmd.Parameters.Add("@project_name", [System.Data.SqlDbType]::NVarChar, 128).Value = $projectName
          $cmd.Parameters.Add("@project_stream", [System.Data.SqlDbType]::VarBinary, -1).Value = $projectBytes

          try {
            Write-Output "Deploying project..."
            $cmd.ExecuteNonQuery() | Out-Null
            Write-Output "✅ Deployment succeeded!"
          } catch {
            Write-Error "❌ Deployment failed: $_"
            exit 1
          } finally {
            $conn.Close()
          }
