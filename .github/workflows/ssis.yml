name: Deploy SSIS Packages to SQL Server

on:
  workflow_dispatch:

jobs:
  deploy-ssis:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug workspace and file layout
        shell: powershell
        run: |
          Write-Output "Workspace: ${{ github.workspace }}"
          Get-ChildItem -Path "${{ github.workspace }}" -Recurse

      - name: Verify SSIS project file exists
        shell: powershell
        run: |
          $projectFile = "${{ github.workspace }}\HandsOnProject\Timesheets\ProjectPackages\TimesheetMigration.dtproj"
          if (-not (Test-Path $projectFile)) {
            Write-Error "Missing SSIS project file: $projectFile"
            exit 1
          }
          Write-Output "‚úÖ Found SSIS project: $projectFile"

      - name: Verify SSIS build tools exist
        shell: powershell
        run: |
          if (-not (Test-Path "C:\SSISDevOpsTools\SSISBuild.exe")) {
            Write-Error "‚ùå SSISBuild.exe not found in C:\SSISDevOpsTools"
            exit 1
          }
          if (-not (Test-Path "C:\Program Files\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe")) {
            Write-Error "‚ùå ISDeploymentWizard.exe not found"
            exit 1
          }
          if (-not (Get-Command sqlcmd.exe -ErrorAction SilentlyContinue)) {
            Write-Error "‚ùå sqlcmd.exe not found in PATH"
            exit 1
          }
          Write-Output "‚úÖ All SSIS tools verified."

      - name: Build SSIS Project
        shell: powershell
        run: |
          $projectFile = "${{ github.workspace }}\HandsOnProject\Timesheets\ProjectPackages\TimesheetMigration.dtproj"
          $outputDir = "${{ runner.temp }}\SSISOutput"
          $config = "Development"

          if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
          }

          & "C:\SSISDevOpsTools\SSISBuild.exe" -p:"$projectFile" -o:"$outputDir" -c:"$config" -l:DIAG

          $ispacPath = Join-Path $outputDir "$config\TimesheetMigration.ispac"
          if (-not (Test-Path $ispacPath)) {
            Write-Error "‚ùå Build failed. Missing: $ispacPath"
            exit 1
          }
          Write-Output "‚úÖ Build succeeded: $ispacPath"

      - name: Create SSIS Catalog Folder if not exists
        shell: powershell
        run: |
          $sqlServer = "SAMBE202519"
          $catalogDB = "SSISDB"
          $folderName = "TimesheetMigration"

          $exists = sqlcmd -S $sqlServer -d $catalogDB -Q "SELECT 1 FROM catalog.folders WHERE name = '$folderName'" -E -h -1
          if ([string]::IsNullOrWhiteSpace($exists)) {
            Write-Output "Creating SSIS folder: $folderName"
            sqlcmd -S $sqlServer -d $catalogDB -Q "EXEC catalog.create_folder @folder_name = '$folderName'" -E
          } else {
            Write-Output "‚úÖ SSIS folder '$folderName' already exists"
          }

      - name: Deploy SSIS Project
        shell: powershell
        run: |
          $ispacPath = "${{ runner.temp }}\SSISOutput\Development\TimesheetMigration.ispac"
          $sqlServer = "SAMBE202519"
          $catalogDB = "SSISDB"
          $folderName = "TimesheetMigration"
          $projectName = "TimesheetMigration"

          Add-Type -AssemblyName System.Data
          $projectBytes = [System.IO.File]::ReadAllBytes($ispacPath)
          $connString = "Data Source=$sqlServer;Initial Catalog=$catalogDB;Integrated Security=SSPI;"
          $conn = New-Object System.Data.SqlClient.SqlConnection $connString
          $conn.Open()

          $cmd = $conn.CreateCommand()
          $cmd.CommandText = "[catalog].[deploy_project]"
          $cmd.CommandType = [System.Data.CommandType]::StoredProcedure

          $cmd.Parameters.Add("@folder_name", [System.Data.SqlDbType]::NVarChar, 128).Value = $folderName
          $cmd.Parameters.Add("@project_name", [System.Data.SqlDbType]::NVarChar, 128).Value = $projectName
          $cmd.Parameters.Add("@project_stream", [System.Data.SqlDbType]::VarBinary, -1).Value = $projectBytes

          try {
            Write-Output "üöÄ Deploying SSIS project..."
            $cmd.ExecuteNonQuery() | Out-Null
            Write-Output "‚úÖ SSIS deployment successful!"
          } catch {
            Write-Error "‚ùå Deployment failed: $_"
            exit 1
          } finally {
            $conn.Close()
          }
